name: Deploy Pennyworth Service Bot (Slack)

on:
  #schedule:
    #- cron: '45 7 * * 1-5'
  #push:
    #branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Capture start time
        id: start-time
        if: always()
        run: echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Get Secrets from Bitwarden
        id: bws
        uses: bitwarden/sm-action@v2
        with:
          access_token: ${{ secrets.BW_ACCESS_TOKEN }}
          base_url: https://vault.bitwarden.com
          secrets: |
            c9b70456-681a-4ce3-be4f-b289016dd68c > SLACK_BOT_TOKEN
            9e95df6c-4036-418e-98ae-b2890174cfb5 > SLACK_CHANNEL_ID
            1b3b4b3b-4b3b-4b3b-4b3b-4b3b4b3b4b3b > SLACK_APP_TOKEN
            2b3b4b3b-4b3b-4b3b-4b3b-4b3b4b3b4b3b > SLACK_SIGNING_SECRET
            3b3b4b3b-4b3b-4b3b-4b3b-4b3b4b3b4b3b > GEMINI_API_KEY
            4b3b4b3b-4b3b-4b3b-4b3b-4b3b4b3b4b3b > TRELLO_API_KEY
  
      
      - name: Set up application configuration
        run: |
          # Create config file with secrets
          cat > .env <<EOL
          # Slack Configuration
          SLACK_BOT_TOKEN=${{ steps.bws.outputs.SLACK_BOT_TOKEN }}
          SLACK_APP_TOKEN=${{ steps.bws.outputs.SLACK_APP_TOKEN }}
          SLACK_SIGNING_SECRET=${{ steps.bws.outputs.SLACK_SIGNING_SECRET }}
          
          # Google Gemini Configuration
          GEMINI_API_KEY=${{ steps.bws.outputs.GEMINI_API_KEY }}
          
          # Trello Configuration
          TRELLO_API_KEY=${{ steps.bws.outputs.TRELLO_API_KEY }}
          TRELLO_API_SECRET=${{ steps.bws.outputs.TRELLO_API_SECRET }}
          TRELLO_TOKEN=${{ steps.bws.outputs.TRELLO_TOKEN }}
          
          # Application Configuration
          LOG_LEVEL=INFO
          ADMIN_CHANNEL=C0123456789
          EOL
      
      - name: Deploy application
        run: |
          # Package the application
          mkdir -p deploy
          cp -r src/ main.py requirements.txt .env deploy/
          
          # Example: Deploy to server (you'll need to adjust this for your deployment target)
          # For example, using SSH to deploy to a server:
          # - Install SSH key
          # - SCP/RSYNC the files
          # - Restart the service
          
          echo "Deployment would happen here"
          
          # Example for SSH deployment (uncomment and configure as needed)
          # mkdir -p ~/.ssh
          # echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          # chmod 600 ~/.ssh/id_rsa
          # rsync -avz --delete deploy/ user@server:/path/to/pennyworth-bot/
          # ssh user@server "cd /path/to/pennyworth-bot && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt && systemctl restart pennyworth-bot"
      

          - name: Capture end time
          id: end-time
          if: always()
          run: echo "end_time=$(date +%s)" >> $GITHUB_OUTPUT
    
      - name: Calculate runtime
        id: runtime
        if: always()
        run: |
            start_time=${{ steps.start-time.outputs.start_time }}
            end_time=${{ steps.end-time.outputs.end_time }}
            runtime=$((end_time - start_time))
            minutes=$((runtime / 60))
            seconds=$((runtime % 60))
            echo "runtime=${minutes}m ${seconds}s" >> $GITHUB_OUTPUT

      - name: Get current time
        id: current-time
        if: always()
        run: echo "time=$(TZ=America/New_York date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_OUTPUT

      - name: Send completion notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        env:
            SLACK_BOT_TOKEN: ${{ steps.bws.outputs.SLACK_BOT_TOKEN }}
        with:
            channel-id: ${{ steps.bws.outputs.SLACK_CHANNEL_ID }}
            payload: |
                {
                "text": "Workflow ${{ job.status }}: PostgreSQL Docker Container Deploy & Configure",
                "blocks": [
                    {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "${{ job.status == 'success' && '✅' || '❌' }} Q-Room Deploy: ${{ job.status }}",
                        "emoji": true
                    }
                    },
                    {
                    "type": "section",
                    "fields": [
                        {
                        "type": "mrkdwn",
                        "text": "*Repository:*\n${{ github.repository }}"
                        },
                        {
                        "type": "mrkdwn",
                        "text": "*Status:*\n${{ job.status }}"
                        }
                    ]
                    },
                    {
                    "type": "section",
                    "fields": [
                        {
                        "type": "mrkdwn",
                        "text": "*Trigger:*\n${{ github.event_name }}"
                        },
                        {
                        "type": "mrkdwn",
                        "text": "*Workflow:* ${{ github.workflow }}\n*Completed:* ${{ steps.current-time.outputs.time }}\n*Runtime:* ${{ steps.runtime.outputs.runtime }}"
                        }
                    ]
                    },
                    {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "*<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>*"
                    }
                    }
                ],
                "color": "${{ job.status == 'success' && '#36a64f' || '#dc3545' }}"
                }