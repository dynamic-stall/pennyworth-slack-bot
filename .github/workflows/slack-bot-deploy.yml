name: Deploy Pennyworth AI Slack Bot

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'src/__init__.py'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
    
    concurrency:
      group: deploy-${{ github.ref}}
      cancel-in-progress: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract app version from code
        id: extract_version
        run: |
            echo "version=$(python -c "import re; print(re.search(r\"__version__ = '(.*?)'|version = '(.*?)'\", \
                open('src/__init__.py').read()).group(1) or re.search(r\"__version__ = '(.*?)'|version = '(.*?)'\", \
                open('src/__init__.py').read()).group(2))")" >> $GITHUB_OUTPUT

      - name: Create .env file from Bitwarden secrets
        run: |
          # Create .env file with all available secrets
          cat > .env <<EOL
          # Slack Configuration
          SLACK_BOT_TOKEN=${{ secrets.SLACK_OAUTH_TOKEN }}
          SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}
          SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }}
          
          # Channel IDs
          UPPERYARD_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_UPPERYARD }}
          GALLEY_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_GALLEY }}
          AFROTAKU_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_AFROTAKU }}
          UXOPS_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_UXOPS }}
          
          # Trello Configuration
          TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}
          TRELLO_API_SECRET=${{ secrets.TRELLO_API_SECRET }}
          TRELLO_TOKEN=${{ secrets.TRELLO_TOKEN }}
          
          # Google AI Configuration
          GOOGLE_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL=${{ vars.GEMINI_MODEL }}
          
          # GCP Configuration
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          
          # Application Configuration
          TIMEZONE=${{ vars.TIMEZONE }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          SERVICE_EMAIL=${{ vars.SVC_ACCT_EMAIL }}
          ADMIN_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_UPPERYARD }}
          EOL       

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ vars.PYTHON_VERSION }}
            cache: 'pip'
      
      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        
      - name: Set up application configuration
        run: |
            # Create config file with secrets
            cat > .env <<EOL
            # Slack Configuration
            SLACK_BOT_TOKEN=${{ secrets.SLACK_OAUTH_TOKEN }}
            SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}
            SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }}
            GALLEY_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_GALLEY }}
            AFROTAKU_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_AFROTAKU }}
            UXOPS_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_UXOPS }}
            
            # Chat Settings
            TIMEZONE=${{ vars.TIMEZONE }}

            # Google Gemini Configuration
            GOOGLE_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            GEMINI_MODEL=${{ vars.GEMINI_MODEL }}
            
            # Trello Configuration
            TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}
            TRELLO_API_SECRET=${{ secrets.TRELLO_API_SECRET }}
            TRELLO_TOKEN=${{ secrets.TRELLO_TOKEN }}

            # Email Configuration
            SERVICE_EMAIL=${{ vars.SVC_ACCT_EMAIL }}

            # Application Configuration
            LOG_LEVEL=${{ vars.LOG_LEVEL }}
            ADMIN_CHANNEL=C0123456789
            EOL
            
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
            project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Authenticate to Google Cloud
        id: auth
        run: |
            echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
            gcloud auth activate-service-account --key-file=/tmp/gcp-key.json --project=${{ secrets.GCP_PROJECT_ID }}
            rm /tmp/gcp-key.json

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          # Get extracted version
          VERSION="${{ steps.extract_version.outputs.version }}"

          # Build and tag with both SHA and version
          docker build -t ghcr.io/${{ github.repository_owner }}/pennyworth-bot:latest .
          docker tag ghcr.io/${{ github.repository_owner }}/pennyworth-bot:latest ghcr.io/${{ github.repository_owner }}/pennyworth-bot:v${VERSION}

          # Push both tags
          docker push ghcr.io/${{ github.repository_owner }}/pennyworth-bot:latest
          docker push ghcr.io/${{ github.repository_owner }}/pennyworth-bot:v${VERSION}

          # Save version for later steps
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker --quiet

      - name: Copy image to Google Container Registry
        run: |
          # Pull the GitHub image
          docker pull ghcr.io/${{ github.repository_owner }}/pennyworth-bot:latest

          # Tag it for Google Container Registry
          docker tag ghcr.io/${{ github.repository_owner }}/pennyworth-bot:latest \
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/pennyworth-bot:latest
          docker tag ghcr.io/${{ github.repository_owner }}/pennyworth-bot:latest \
            gcr.io/${{ secrets.GCP_PROJECT_ID }}/pennyworth-bot:v${VERSION}

          # Push tags to GCR
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/pennyworth-bot:latest
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/pennyworth-bot:v${VERSION}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy pennyworth-bot \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/pennyworth-bot:v${VERSION} \
            --platform managed \
            --region us-central1 \
            --memory 256Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 1 \
            --no-allow-unauthenticated \
            --set-env-vars "SLACK_BOT_TOKEN=${{ secrets.SLACK_OAUTH_TOKEN }}" \
            --set-env-vars "SLACK_APP_TOKEN=${{ secrets.SLACK_APP_TOKEN }}" \
            --set-env-vars "SLACK_SIGNING_SECRET=${{ secrets.SLACK_SIGNING_SECRET }}" \
            --set-env-vars "GALLEY_CHANNEL"="${{ secrets.SLACK_CHANNEL_ID_GALLEY }}" \
            --set-env-vars "AFROTAKU_CHANNEL"="${{ secrets.SLACK_CHANNEL_ID_AFROTAKU }}" \
            --set-env-vars "UXOPS_CHANNEL"="${{ secrets.SLACK_CHANNEL_ID_UXOPS }}" \
            --set-env-vars "TIMEZONE=${{ vars.TIMEZONE }}" \
            --set-env-vars "GOOGLE_GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
            --set-env-vars "GEMINI_MODEL=${{ vars.GEMINI_MODEL }}" \
            --set-env-vars "TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}" \
            --set-env-vars "TRELLO_API_SECRET=${{ secrets.TRELLO_API_SECRET }}" \
            --set-env-vars "TRELLO_TOKEN=${{ secrets.TRELLO_TOKEN }}" \
            --set-env-vars "SERVICE_EMAIL=${{ vars.SVC_ACCT_EMAIL }}" \
            --set-env-vars "LOG_LEVEL=${{ vars.LOG_LEVEL }}" \
            --set-env-vars "ADMIN_CHANNEL=${{ secrets.SLACK_CHANNEL_ID_UPPERYARD }}" \
            --timeout 300s \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --quiet
